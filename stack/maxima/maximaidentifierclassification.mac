/* THE SECOND SCRIPT to be called after the first one has been fully completed. */
/* Uses data collected by the identifier dump.                                  */


/* Load matchign libraries. */
load("stackmaxima.mac")$
load("stats")$
load("distrib")$
load("descriptive")$
load("simplex")$

/* Load the identifiers. */
load("identifier-map.lisp")$

/* Build the listing to here. */
resultmap: ["stack_map"]$

/* Go through all the subsets extracted in the first script */
for __src in stackmap_keys(stackidentifiermap) do (
    subresultmap: ["stack_map"],
    subresultmap: stackmap_set(subresultmap, "constants", ["stack_map"]),
    subresultmap: stackmap_set(subresultmap, "functions", ["stack_map"]),
    subresultmap: stackmap_set(subresultmap, "options", ["stack_map"]),
    subresultmap: stackmap_set(subresultmap, "flags", ["stack_map"]),
    subresultmap: stackmap_set(subresultmap, "bound variables", ["stack_map"]),
    subresultmap: stackmap_set(subresultmap, "err", ["stack_map"]),
    subresultmap: stackmap_set(subresultmap, "???", ["stack_map"]),

    /* All the identifiers in this subset. */
    for __id in stackmap_get(stackidentifiermap, __src) do (
        if member(__id, ["and","or","nounand","nounor","do","else","if","then","elseif","for","while","thru","from","next","not","step","unless","%and","%or","UNARY_RECIP","blankmult"]) then (
            noop
        ) else (
            /* Get the identifier from the string without evaluating it. */
            __val: errcatch(parse_string(sconcat("(",__id,");"))),
            if is(__val=[]) then (
                subresultmap: stackmap_set(subresultmap, "err", stackmap_set(stackmap_get(subresultmap, "err"), __id, true))
            ) else (
                __props : apply(properties, __val),

                __is_constant: constantp(__val[1]) or (member("database info", __props) and not (member(transfun, __props) or member(rule, __props) or member(feature, __props))),
                __is_function: false,
                __is_bound: false,
                __is_flag: false,
                __is_option: false,
                __ignore: false,

                /* What do the properties tell us? */


                /* Note an identifier can be many things so no else ifs... */
                if member("evflag", __props) or member(evflag, __props) or member("assign property", __props) then __is_flag:true,
                if member("system value", __props) then __is_option:true,
                if not __is_constant and (member(value, __props) or ?boundp(__val[1])) then __is_bound:true,
                if ?fboundp(__val[1]) or member("system function", __props)
                    or member(noun, __props) or member(transfun, __props)
                    or member(function, __props) or member("special evaluation form", __props)
                    or member("limit function", __props) or member(rule, __props)
                    then __is_function:true,

                /* Lets check if it is documented, if nit then probably safe to ignore */
                /* Would work if we could strip the interaction form this */
                /* if (apply(describe,[__id, exact])=false) then __ignore:true, */

                if __is_function then (
                    subresultmap: stackmap_set(subresultmap, "functions", stackmap_set(stackmap_get(subresultmap, "functions"), __id, true))
                ),
                if __is_constant then (
                    subresultmap: stackmap_set(subresultmap, "constants", stackmap_set(stackmap_get(subresultmap, "constants"), __id, true))
                ),
                if __is_flag then (
                    subresultmap: stackmap_set(subresultmap, "flags", stackmap_set(stackmap_get(subresultmap, "flagsflags"), __id, true))
                ),
                if __is_option then (
                    subresultmap: stackmap_set(subresultmap, "options", stackmap_set(stackmap_get(subresultmap, "options"), __id, true))
                ),
                if __is_bound then (
                    subresultmap: stackmap_set(subresultmap, "bound variables", stackmap_set(stackmap_get(subresultmap, "bound variables"), __id, true))
                ),
                if not (__ignore or __is_bound or __is_flag or __is_option or __is_function or __is_constant) then (
                    subresultmap: stackmap_set(subresultmap, "???", stackmap_set(stackmap_get(subresultmap, "???"), __id, true))
                )
            )
        )
    ),

    for __key in stackmap_keys(subresultmap) do (
        if is (stackmap_get(subresultmap, __key)=["stack_map"]) then (
            /* Clean a bit.*/
            subresultmap: stackmap_unset(subresultmap, __key)
        )
    ),

    resultmap: stackmap_set(resultmap, __src, subresultmap)
)$


/* Dump the data out. */
f: openw("identifier-map.json")$
printf(f, "~a",ssubst("","\\",stackjson_stringify(resultmap)))$
close(f)$
