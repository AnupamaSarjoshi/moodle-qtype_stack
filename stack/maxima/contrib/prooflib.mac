/*  Author Chris Sangwin
    University of Edinburgh
    Copyright (C) 2023 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/******************************************************************/
/*  Functions for representing, typesetting and assessing proof.  */
/*  Mostly for use with Parsons problems.                         */
/*                                                                */
/*  Chris Sangwin, <C.J.Sangwin@ed.ac.uk>                         */
/*  V1.0 Sept 2023                                                */
/*                                                                */
/******************************************************************/

/* An example of how to use these functions.

stack_include("https://raw.githubusercontent.com/maths/moodle-qtype_stack/proof-builder/stack/maxima/contrib/prooflib.mac");
stack_include("https://raw.githubusercontent.com/maths/moodle-qtype_stack/proof-builder/stack/maxima/proofsamples/odd-squaredodd.mac");

(For local testing: stack_include("contribl://prooflib.mac");)

tap:ev(proof_disp_replacesteps(proof_ans, proof_steps), map(lambda([ex], ex=dispproof), proof_types));

{@thm@}
{@tap@}
*/

/******************************************************************/
/* Types of proof.                                                */
/*                                                                */
/* proof()       - general, unspecified proof                     */
/* proof_c()     - general proof, with commutative arguments      */
/*                                                                */
/* proof_iff()   - if any only if                                 */
/* proof_cases() - proof by exhaustive cases, the first element   */
/*                 is assumed to justify the cases.               */
/* proof_ind()   - proof by induction                             */
/*                                                                */
/******************************************************************/

/* General proof functions                                        */

/* Note, "proof" is assumed to come first in this list, as we use "rest" below for other types. */
proof_types:[proof, proof_c, proof_iff, proof_cases, proof_ind];

proofp(ex) := block(
  if atom(ex) then true,
  if elementp(op(ex), setify(proof_types)) then return(true),
  return(false)
);

s_test_case(proofp(proof(1,2,3)), true);
s_test_case(proofp(sin(x)), false);

proof_validatep(ex) := block(
  if atom(ex) then return(true),
  if op(ex) = proof_iff then
      if not(is(length(args(ex)) = 2)) then return(false)
                                       else return(all_listp(proof_validatep, args(ex))),
  if op(ex) = proof_ind then
      if not(is(length(args(ex)) = 4)) then return(false)
                                       else return(all_listp(proof_validatep, args(ex))),
  /* Validate all remaning proof types. */
  if proofp(ex) then return(all_listp(proof_validatep, args(ex))),
  return(false)
);

s_test_case(proof_validatep(proof(1,2,3)), true);
s_test_case(proof_validatep(proof(1,2,proof(4,5,6))), true);
s_test_case(proof_validatep(proof(1,2,proof_iff(4,5))), true);
/* proof_iff must have exactly two sub-proofs. */
s_test_case(proof_validatep(proof(1,2,proof_iff(4))), false);
s_test_case(proof_validatep(proof(1,2,proof_iff(4,5,6))), false);
/* proof_ind must have exactly four sub-proofs. */
s_test_case(proof_validatep(proof_ind(1,proof(2,3),proof(4,5),6)), true);
s_test_case(proof_validatep(proof_ind(1,proof(2,3),proof(4,5))), false);

/* Is this a type of proof which can reorder its arguments? */
proof_commutep(ex):=block(
    if atom(ex) then false,
    if is(op(ex)=proof_c) then return(true),
    if is(op(ex)=proof_iff) then return(true),
    return(false)
);

/* Takes a proof tree and flattens this to a list. */
proof_flatten(ex) := apply(proof, flatten(ev(ex, map(lambda([ex2], ex2="["), proof_types))));

s_test_case(proof_flatten(proof_iff(proof(A,B),proof(C))), proof(A,B,C));
s_test_case(proof_flatten(proof_c(proof(A,proof(B,C)),proof(D))), proof(A,B,C,D));

/*
 * Create a normalised proof tree. 
 * To establish equivalence of proof trees we compare the normalised form.
 * This basically sorts and "simplifies" its arguments.
*/
proof_normal(ex) := block(
  if atom(ex) then return(ex),
  /* Only sort arguments to types of proof which commute. */
  if proof_commutep(ex) then return(apply(op(ex), sort(map(proof_normal, args(ex))))),
  /* Some proof types have subsets of arguments which commute. */
  if op(ex) = proof_cases then return(apply(proof_cases, append([first(args(ex))], sort(map(proof_normal, rest(args(ex))))))),
  if op(ex) = proof_ind then return(apply(proof_ind,append([first(args(ex))], sort([proof_normal(second(args(ex))), proof_normal(third(args(ex)))]), [fourth(args(ex))]))),
  return(apply(op(ex), map(proof_normal, args(ex))))
);

s_test_case(proof_normal(proof_c(B,A,D,C)), proof_c(A,B,C,D));
s_test_case(proof_normal(proof_iff(B,A)), proof_iff(A,B));
s_test_case(proof_normal(proof_ind(D,C,B,A)), proof_ind(D,B,C,A));
s_test_case(proof_normal(proof_cases(D,C,B,A)), proof_cases(D,A,B,C));

/******************************************************************/
/*                                                                */
/*  Assessment functions                                          */
/*                                                                */
/******************************************************************/

/* Create a list of all proof trees which are alternatives to this.
   Clearly this is a potentially exponential algorithm, so use with care!
*/
proof_alternatives(ex):=block([p1,p2],
    p2:proof_one_alternatives(ex),
    do (p1:p2, p2:proof_one_distrib(p1), if is(p1=p2) then return(proof_ensure_list(p2)))
);

proof_one_alternatives(pr) := block(
  if atom(pr) then return(pr),
  if proof_commutep(pr) then return(apply(pf_one, map(lambda([ex], apply(op(pr), map(proof_one_alternatives, ex))), listify(permutations(args(pr)))))),
  /* In a proof by exhaustive cases the first element is fixed. */
  if op(pr)=proof_cases then return(apply(pf_one, map(lambda([ex], apply(op(pr), append([first(args(pr))], map(proof_one_alternatives, ex)))), listify(permutations(rest(args(pr))))))),
  /* In a proof by induction cases the first element and last elents are fixed. */
  if op(pr) = proof_ind then return(apply(pf_one, map(lambda([ex], apply(op(pr), append([first(args(pr))],
      map(proof_one_alternatives, ex), [fourth(args(pr))]))), listify(permutations([second(args(pr)), third(args(pr))]))))),
  apply(op(pr), map(proof_one_alternatives, args(pr)))
);

proof_one_distribp(ex):= not(atom(ex)) and is(op(ex)=pf_one);

proof_one_distrib(ex):= block([_a,_i,_l],
   if atom(ex) then return(ex),
   if freeof(pf_one, ex) then return(ex),
   /* If pf_one has worked its way to the top we return the list of options. */ 
   if is(op(ex)=pf_one) then return(args(ex)),
   if (listp(ex)) then return(flatten(map(proof_one_distrib, ex))),
   /* Pull out first argument to have pf_one */
   _i:sublist_indices(args(ex), proof_one_distribp),
   /* If none of the arguments need distribution, then go one level down. */
   if emptyp(_i) then return(apply(op(ex), map(proof_one_distrib, args(ex)))),
   _i:first(_i),
   _a:args(part(args(ex),_i)),
   _l:ev(makelist(k,k,1,length(_a)),simp),
    /* This list is not free of pf_one, so we take the first. */
   apply(pf_one, map(lambda([ex2], block([_aa], _aa:copy(args(ex)), _aa[_i]:_a[ex2], return(apply(op(ex),_aa)))), _l))
);

proof_ensure_list(ex):= if listp(ex) then return(ex) else return([ex]);

s_test_case(proof_alternatives(proof(A,B,C,D)), [proof(A,B,C,D)]);
s_test_case(proof_alternatives(proof_c(A,B)), [proof_c(A,B),proof_c(B,A)]);
s_test_case(proof_alternatives(proof_ind(A,B,C,D)), [proof_ind(A,B,C,D),proof_ind(A,C,B,D)]);

/*
 * Count the number of matching elements in
 * two identical length lists.
 */
count_matches(l1, l2):= if emptyp(l1) then 0 else
    ((if is(first(l1)=first(l2)) then 1 else 0) + count_matches(rest(l1), rest(l2)));

/*
 * Create a list of first differences between list memebers, i.e. Delta = l[n]-l[n+1].
 */
first_diff(ex):=if is(length(ex)=1) then [] else append([first(ex)-second(ex)], list_diff(rest(ex)));

/******************************************************************/
/*                                                                */
/*  STACK Parson's block functions                                */
/*                                                                */
/******************************************************************/

/*
 * Take the JSON from STACK Parson's block and return a proof function.
 */
proof_parsons_interpret(st) := block([pf],
  pf:stackjson_parse(st),
  pf:apply(proof, stackmap_get(pf, "used"))
);
s_test_case(proof_parsons_interpret("{\"used\":[\"0\",\"3\",\"5\"],\"available\":[\"1\",\"2\",\"4\",\"6\",\"7\"]}"), proof("0","3","5"));

/******************************************************************/
/*                                                                */
/*  Display functions                                             */
/*                                                                */
/******************************************************************/

/*
 *  Return the step "k" from the proof "pf".
 */
proof_getstep(k, pf) := block([keylist],
    if integerp(k) then return(second(pf[k])),
    keylist:sublist(pf, lambda([ex], is(first(ex)=k))),
    if not(emptyp(keylist)) then return(second(first(keylist))),
    return(sconcat("Error: could not identify step: ", k))
);

/*
 * This function replaces integers and keys with the literal strings from the proof.
 */
proof_disp_replacesteps(ex, proof_steps) := block(
   if integerp(ex) or stringp(ex) then return(proof_getstep(ex, proof_steps)),
   if atom(ex) then return(sconcat("Error: the following atom does not index a step: ", string(ex))),
   apply(op(ex), map(lambda([ex2], proof_disp_replacesteps(ex2, proof_steps)), args(ex)))
);

/**
 * Take a proof of numbered indexes, and translate this into string keys.
 */
proof_steps_sub(ex, pf):= block(
   if integerp(ex) then return(first(proof_steps[ex])),
   apply(op(ex), map(lambda([ex2], proof_steps_sub(ex2, pf)), args(ex)))
);

/**
 * Replace displayed LaTeX mathematics delimiters with inline.
 */
proof_inline_maths(st) := ssubst("\\)", "\\]", ssubst("\\(", "\\[", st));
s_test_case(proof_inline_maths("\\[ 3 = 2^{\\frac{p}{q}}\\]"), "\\( 3 = 2^{\\frac{p}{q}}\\)");

/* Make use of the existing styles.  See https://docs.stack-assessment.org/en/Topics/Proof/ */
dispproof([ex]) := block([ex1],
    apply(sconcat, flatten(append(["<div class=\"proof-block\">"], [simplode(ex, "<br/>")], ["</div>"])))
);

/* Use the summary/details HTML tag.
dispproof([ex]) := block([ex1],
    apply(sconcat, flatten(append(["<summary><details><div class=\"proof-block\">"], [simplode(ex, "<br/>")], ["</div></details></summary>"])))
);
*/

/* Flatten to a paragraph.
dispproof([ex]) := block([ex1],
    apply(sconcat, flatten(append(["<p>"], [simplode(ex, " ")], ["</p>"])))
);
*/
