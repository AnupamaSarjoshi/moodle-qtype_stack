/* THIS IS EXPERIMENTAL CODE */
/* Currently this is under development by CJS and is not connected to the main STACK codebase */
/* It sits here because the long-term goal is to incorporate it */

/* More general random function - recurses accross the structure.
   Notice the use of the dummy "protect()" function to stop further evaluation.
   E.g.
   rand_recurse((5+protect(2))*x^protect(2)+3*x+7);
   rand_recurse(sin([x,y,z]));
*/in
rand_recurse(ex) := block(
    if (integerp(ex) or floatnump(ex) or matrixp(ex) or listp(ex)) then return(rand(ex)),
    if atom(ex) then return(ex),
    if op(ex)=protect then return(first(args(ex))),
    apply(op(ex),maplist(rand_recurse,args(ex)))
    );

/* Truncates a polynomial to only terms of degree "d" or less - always expands out */
poly_truncate(pa,d) := apply("+",maplist(lambda([ex],if hipow(ex,x)>d then 0 else ex), args(expand(pa))));
