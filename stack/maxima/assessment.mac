/*  Author Chris Sangwin
    University of Edinburgh
    Copyright (C) 2015 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */


/****************************************************************/
/*  An assessment package for Maxima                            */
/*                                                              */
/*  Chris Sangwin, <chris@sangwin.com>                          */
/*  V0.7 September 2015                                         */
/*                                                              */
/****************************************************************/

MAXIMA_VERSION:map(parse_string, tokens(?\*autoconf\-version\*, 'digitcharp))$
MAXIMA_VERSION_NUM:float(MAXIMA_VERSION[2]+MAXIMA_VERSION[3]/10)$

/* ********************************** */
/* Load contributed packages          */
/* ********************************** */

if not(?functionp('poly_reduced_grobner)) then load("grobner");

/* Package dependency: makes use of the %and and %or functions from to_poly_solver
   for representing and dealing with inequalities.              */
if not(?functionp('to_poly_solve)) then load("to_poly_solve");

if not(?functionp('rempart)) then load(functs);

load("inequalities.mac");

/* ********************************** */
/* Parts of expressions               */
/* ********************************** */

/* op(ex) is unsafe on atoms: this is a fix. */
/* This function always returns a string.    */
safe_op(ex) := block([st],
    if mapatom(ex) then return(""),
    if stringp(op(ex)) then return(op(ex)), 
    st:string(op(ex)),
    /* %and operators are displayed as "?%and" on some systems and "%and" on others.*/
    if ?subseq(st, 0, 1) = "?" then 
        st:?subseq(st, 1, ev(?length(st), simp)),
    return(st)
)$

/* This function takes an expression ex and returns a list of coefficients of v. */
coeff_list(ex, v) := block([deg, kloop, cl],
  cl:[],
  ex:ev(expand(ex), simp),
  deg:hipow(ex, v),
  ev(for kloop:0 thru deg do
    cl:append(cl, [coeff(ex, v, kloop)]), simp),
  cl
)$

/* This function takes an expression ex and returns a list of nonzero coefficients of v. */
coeff_list_nz(ex, v) := block([deg, kloop, cl],
  cl:[],
  ex:ev(expand(ex), simp),
  deg:hipow(ex, v),
  ev(for kloop:0 thru deg do
    if coeff(ex, v, kloop)#0 then cl:append(cl, [[kloop, coeff(ex, v, kloop)]]), simp),
  cl
)$

/* Equate coefficients of two polynomials. */
poly_equate_coeffs(p1,p2,v) := block([deg,kloop,cl],
   /* Based on the code for coeff_list, but we need to run over the end. */
   cl:[],
   p1:ev(expand(p1),simp),
   p2:ev(expand(p2),simp),
   deg:max(hipow(p1,v), hipow(p1,v)),
   ev(for kloop:0 thru deg do
     cl:append(cl,[coeff(p1,v,kloop)=coeff(p2,v,kloop)]),simp),
   cl
);

/* Return the set of operations which occur in the expression. */
/* Note, this function varies depending on the value of simp!  */
/* E.g. x+x-> 2*x, so is this a product of sum?                */
get_ops(ex):= setify(flatten(get_ops_helper(ex)))$
get_ops_helper(ex):=if mapatom(ex) then [] else append([op(ex)],maplist(get_ops_helper,args(ex)))$


/* Predicate to test if an operator is used in an expression. */
op_usedp(ex, opused) := block(
   if atom(ex) then return(false),
   if op(ex)=opused then return(true),
   apply("or", maplist(lambda([ex2], op_usedp(ex2, opused)), args(ex)))   
)$

/* Count the occurances of v in ex. */
count_occurances(ex, v):=block(
  if ex=v then return(1),
  if atom(ex) then return(0),
  apply("+", map(lambda([ex2], count_occurances(ex2, v)), args(ex))) 
)$

/* ********************************** */
/* General list and utility functions */
/* ********************************** */

/* True if and only if ex is in the list l. */
element_listp(ex, l) := any_listp(lambda([ex2], is(ex2=ex)), l)$

/* all_listp(p,l) true if all elements of l satisfy p. */
all_listp(p, l) := if listp(l) then ret:apply("and", maplist(p, l)) else ret:"fail"$

/* any_listp(p,l) true if all elements of l satisfy p. */
any_listp(p, l) := if listp(l) then ret:apply("or", maplist(p, l)) else ret:"fail"$

/* Returns true iff a and b are lists (not necessarily same length) with one or more common elements, false o/w. */
listsoverlap(a, b) := not(emptyp(intersection(setify(a), setify(b))))$

/* Returns true iff a and b are lists (not necessarily same length) and contain the common element v */
listscontain(a, b, v) := elementp(v,intersection(setify(a), setify(b)))$

/* This function applies the binary function zf to two lists a and b returning a list
[ zf(a[1],b[1]), zf(a[2],b[2]), ... ] zip_with quietly gives up when one of the list runs out of elements.  
   Actually, we can achieve some of this with map(zf, a, b) but this does not give up quietly
   if the arguments are different lengths.
*/
zip_with(zf, a, b) := block(
  if not(listp(a)) then return(false),
  if not(listp(b)) then return(false),
  if emptyp(a) then return([]),
  if emptyp(b) then return([]),
  cons(zf(first(a), first(b)),  zip_with(zf, rest(a), rest(b)))
)$

/* This function makes a substitution of all variables for their lower case equivalents.
   Useful when wanting to do a specific case sensitivity 
   check, e.g. that X^2=1 is x^2=1, without using subst_equiv. 
 
   Note that exdowncase(X-x)=0, of course! 
*/
exdowncase(ex) := block([lv],
  lv:listofvars(ex),
  lv:map(lambda([v], v=parse_string(sdowncase(string(v)))),lv),
  return(subst(lv,ex)))$

/* Maxima does not have its own degree command! */
/* See notes on hipow.                          */
degree(ex,v) := ev(hipow(expand(ex), v), simp); 

/* is(ex) does not work when simp:false.*/
is_simp(ex) := ev(is(ex), simp)$

/* ********************************** */
/* Type predicates                    */
/* ********************************** */

/* Determines if we are using an equation. */
equationp(ex) := block(
   if atom(ex) then return(false),
   if "="= op(ex) then return(true),
   return(false)
)$

/* Determines if we are using a function. */
functionp(ex) := block(
   if atom(ex) then return(false),
   if ":="= op(ex) then return(true),
   return(false)
)$

/* Determines if we are using an inequality. */
inequalityp(ex) := block(
   if atom(ex) then return(false),
   if ">" = op(ex) or "<" = op(ex) or ">=" = op(ex) or "<=" = op(ex) then return(true),
   return(false)
)$

expressionp(ex) := block(
 if matrixp(ex) or listp(ex) or equationp(ex) or inequalityp(ex) or safe_setp(ex) or functionp(ex) or logicp(ex) then
    return (false),
 return(true)
);

/* Checks that an expression is a polynomial. */
polynomialpsimp(e):= polynomialp(e, listofvars(e))$

/* This is to fix a bug in Maxima 5.38.1.  */
safe_setp(ex) := setp(ex) or safe_op(ex) = "{"$

/* ********************************** */
/* Numerical operations               */
/* ********************************** */

/* numberp() does not "work" when simp:false, since unary minus is an unevaluated function... */
simp_numberp(ex) := block(
  if numberp(ex) then return(true),
  if atom(ex) then return(false),
  if op(ex)="-" and numberp(first(args(ex))) then return(true),
  false
)$

/* Do we have a real number?*/
/* Code taken from Stack_Test */
real_numberp(ex):=
    block([keepfloat, trigexpand, logexpand],
    trigexpand:true,
    logexpand:super,
    keepfloat:true,
    ex:errcatch(ev(fullratsimp(ex), logbase=logbasesimp, simp)),
    if ex=[] then return(false),
    ex:ev(float(ex[1]),simp),
    if listofvars(ex)#[] then return(false),
    if floatnump(ex) then return(true) else return(false)
)$    
    
/* commonfaclist(l) returns the gcd of a list of numbers. */
commonfaclist(l) := block([i, a, ret],
 if listp(l) then
  ret:( a:l[1],
        if length(l)>1 then
            ev(for i:2 thru length(l) do (a:ev(gcd(a, l[i]), simp)), simp),
        return(a))
  else ret:"fail",
 return(ret) )$

/* Returns a list of factors of ex without multiplicities. */
factorlist(ex) := block([simp:false, ret:"", ex2],
  ex:ev(factor(ex), simp),
  if mapatom(ex) then return([ex]),
  if op(ex)#"*" then
     ret:[ex]
  else
     ret:args(ex),
  /* Strip off powers. */
  ret:maplist(lambda([ex2], if atom(ex2) then ex2 else if op(ex2)="^" then part(ex2,1) else ex2), ret),
  return(ret)
)$

/* Is the fraction in its lowest terms? */
lowesttermsp(ex) := block([simp:false,ex1,ex2,ex3],
  if atom(ex) then return(true),
  if op(ex)#"/" then return(true),
  if safe_op(num(ex))="-" and safe_op(denom(ex))="-" then return(false),
  if gcd(num(ex),denom(ex))=1 then return(true) else return(false)
)$

/* Create a list with all parts for which numberp(ex)=true, or which appear to be rational numbers. */
list_expression_numbers(ex) := block([ex2],
  if mapatom(ex) then (if numberp(ex) then return([ex]) else return([]))
  else (
  if op(ex)="/" and simp_numberp(num(ex)) and simp_numberp(denom(ex)) then return([ex]),
  if op(ex)="-" then return(maplist(lambda([ex], if safe_op(ex)="/" then (-num(ex))/denom(ex) else -ex), list_expression_numbers(first(args(ex))))),
  ex2:args(ex),
  flatten(maplist(list_expression_numbers, ex2)))
)$

all_lowest_termsex(ex):= block([simp:false, ex2],
  ex2:list_expression_numbers(ex),
  all_listp(lowesttermsp,ex2)
)$

/* anyfloats(l) returns true if any of the list are floats */
anyfloat(l) := block([ret:false],
 if listp(l)=false then ret:"fail",
 ev(l:map('floatnump,l),simp),
 ev(for i:1 thru length(l) do (ret:ret or l[i]), simp),
 return(ret) )$

/* Decides if any floats are in the expression. */
anyfloatex(ex) := block([partswitch,ret,kloop],
  ret:false,
  ex:ev(ex,simp),
  if floatnump(ex) then return(true),
  if atom(ex)      then return(false),
  partswitch:true,
  ev(for kloop:1 while part(ex,kloop)#end do
         ret:ret or anyfloatex(part(ex,kloop)),simp),
  return(ret)
)$

/* This function is designed for displaying decimal places. It is also useful for currency. */
/* displaydp(n, dp) is an inert function.  The tex function converts this to display.       */
/* n is the number to be displayed                                                          */
/* dp is the number of decimal places                                                       */
/* Note, displaydp does not do any rounding, it is only display.  Use significantfigures.   */
/* To print out *values* with trailing decimal places use this function.                    */

displaydptex(ex):=block([ss, n, dp],
  [n, dp]:args(ex),
  ss:sconcat("~,", string(dp), "f"),
  if is(equal(dp,0)) then ss:"~d",
  ev(printf(false, ss, ev(float(n))), simp)
);
texput(displaydp, displaydptex);

make_displaydpvalue(ex):= block([n,d],
    if atom(ex) then return(ex),
    if taylorp(ex) or functionp(ex) or freeof(displaydp, ex) then return(ex),
    if arrayp(ex) then return(arraymake(op(ex), maplist(make_displaydpvalue, args(ex)))),
    if not(is(safe_op(ex)="displaydp")) then return(apply(op(ex), maplist(make_displaydpvalue, args(ex)))),
    if not(length(args(ex))=2) then error("displaydp must have exactly 2 arguments"),
    n:ev(float(first(args(ex))), simp),
    d:second(args(ex)),
    if not(floatnump(n) and integerp(d)) then return(ex),
    if is(equal(d,0)) then return(ev(ratsimp(floor(n)), simp)),
    return(apply(dispdpvalue, [n, d]))
);

remove_displaydp(ex):= block(
    if atom(ex) then return(ex),
    if arrayp(ex) then return(arraymake(op(ex), maplist(make_displaydpvalue, args(ex)))),
    if not(is(safe_op(ex)="displaydp")) then return(apply(op(ex), maplist(make_displaydpvalue, args(ex)))),
    return(first(args(ex)))
);

/* Write the number ex in n decimal places */
decimalplacesfun(ex, n, dispdps) := block([ex2],
    ex2:ev(float(round(10^n*float(ex))/(10^n)), logbase=logbasesimp, simp),
    if dispdps then ex2:displaydp(ex2, n),
    return(ex2)
    )$
decimalplaces(ex, n) := decimalplacesfun(ex, n, false)$
dispdp(ex, n) := decimalplacesfun(ex, n, true)$

/* Write numbers in significant figures */
/* Matti Pauna, Sun, 23 Oct 2011        */
sigfigsfun(x, n, dispsigfigs) := block([fpprec:128, fpprintprec:16, simp:true, ex, ex1, ex2, dps],
  if not(integerp(n)) then error("significantfigures(x,n) requires an integer as a second argument."),
  if (is(x = 0) or is(x = 0.0)) then 
    if (is(n <= 1)) then return(0)
    else if dispsigfigs then return(displaydp(0, n-1))
        else return(0),
  sign_of_x:signum(x),
  /* Evaluate logarithms to an arbitrary base. */
  x:ev(x, logbase=logbasesimp, simp),
  /* Evaluate and round. */
  ex:ev(bfloat(log(abs(x))/log(10)), simp),
  ex:ev(floor(float(ex)), simp),
  /* Modification to round 0.5 up to 1, not down as in Maxima's round command. */
  ex1:float(x/10^(ex-n+1)),
  if ex1-floor(ex1) = 0.5 then
      ex2:floor(ex1)+1
  else 
      ex2:round(ex1),
  ex2:ev(bfloat(ex2*10^(ex-n+1)), simp),
  ex2:ev(float(ex2), simp),
  /* Calculate the number of decimal places again, after rounding. */
  ex:ev(bfloat(log(abs(ex2))/log(10)), simp),
  ex:ev(floor(float(ex)), simp),
  if is(debug) then print([ex2, ex, n]),
  if is(floor(ex2) = ratsimp(ex2)) then ex2:ratsimp(ex2),
  if dispsigfigs and is((ex+1-n) < 0) then ex2:displaydp(ex2, n-1-ex),
  return(ex2)
);

significantfigures(x, n) := sigfigsfun(x, n, false);
dispsf(x, n) := sigfigsfun(x, n, true);

scientific_notation([a]) := block([simp:false,x,ex,ex2,ex3,exn],
  if ev(is(length(a)=1), simp) then (x:first(a), exn:false)
  else if ev(is(length(a)=2), simp) then (x:first(a), exn:second(a))
  else error("scientific_notation takes only one or two arguments"),
  x:ev(float(x), logbase=logbasesimp, simp),
  if real_numberp(x) and ev(x>0, simp) then (
      ex:ev(floor(float(log(x)/log(10))), simp),
      ex2:ev(float(x/10^ex), simp),
      ex3:ex2*10^ex,
      if not(is(exn=false)) then ex3:displaydp(ex2, exn)*10^ex,
      return(ex3)
  ) else return (first(a))
)$



/* ********************************** */
/* Equivalence                        */
/* ********************************** */

/* A general all purpose function on **expressions**.
   Takes two objects and returns true if they are equal, and false otherwise
   This is a "bash as hard as possible" function

   26/9/12.  Avoid fullratsimp after exponentialize.  This results in a non-terminating process.

   24/11/13.  Avoid fullratsimp.  This expands out exprsssions such as (x+a)^6000, which results in an overflow.
*/
algebraic_equivalence(SA, SB) :=
    block([keepfloat, trigexpand, logexpand, ex, vi],
    /* Reject obviously different expressions.  These can be very time consuming in the tests below. */
    /* The code below is actually making the situation worse: needs reconsidering. */
    if numerical_not_alg_equiv(SA, SB) then return(false),
    trigexpand:true,
    logexpand:super,
    keepfloat:true,
    /* In some cases we just go inside the function one level. */
    if (safe_op(SA)=safe_op(SB) and (safe_op(SA)="sqrt" or safe_op(SA)="abs")) then
      (SA:first(args(SA)),
       SB:first(args(SB))),
    /* Remove scientific units and displaydp from expressions. */
    SA:ev(SA, stackunits="*"),
    SB:ev(SB, stackunits="*"),
    if not(freeof(displaydp, SA)) then
      SA:remove_displaydp(SA),
    if not(freeof(displaydp, SB)) then
      SA:remove_displaydp(SB),
    /* Remove logarithms to other bases from expressions. */
    if not(freeof(logbase, SA)) then
        SA:ev(SA, logbase=logbasesimp),
    if not(freeof(logbase, SB)) then
        SB:ev(SB, logbase=logbasesimp),
    /* Try not to expand out: pure numbers. */
    ex:errcatch(ev(SA-SB, simp)),
    if ex=[] then (print("algebraic_equivalence: evaluating the difference of two expressions threw an error."), return(false)),
    ex:ex[1],
    if numberp(ex) then
      if rat(ex)=0 then return(true)
      else return (false),
    /* Try not to expand out: factoring, but only if without floats. */
    if not(anyfloatex(SA-SB)) then 
       ex:errcatch(ev(factor(SA-SB), simp)) 
    else
       ex:[ex],
    if ex=[] then (print("algebraic_equivalence: factoring the difference of two expressions threw an error."), return(false)),
    ex:ex[1],
    /* Try to return a negative result without expanding anything! */
    if safe_op(ex)="-" then
       ex:first(args(ex)),
    if (safe_op(ex)="*" or safe_op(ex)="^") then
       if not(any_listp(lambda([ex2], algebraic_equivalence(ex2, 0)), args(ex))) then return(false),
    if ratsimp(ex)=0 then return(true),
    /* Next we expand out the difference. */
    ex:errcatch(ev(fullratsimp(SA-SB), simp)),
    if ex=[] then (print("algebraic_equivalence: evaluating the difference of two expressions threw an error."), return(false)),
    ex:ex[1],
    if floatnump(ex) then return(false),
    ex:num(ex),  /* after a fullratsimp, we have a ratio.  We should only need to consider the top */
    ex:trigsimp(ex),
    ex:rectform(ex),
    ex:exponentialize(ex),
    /* ex:trigreduce(ex), CJS, removed 21/1/2010.  This was breaking ATSingleFrac!  Don't know why. */
    if ratsimp(ex)=0 then return(true),
    ex:radcan(ex),
    ex:factcomb(ex),
    if ratsimp(ex)=0 then return(true),
    for vi:1 while ex#sqrtdenest(ex) do ex:sqrtdenest(ex),
    if ratsimp(ex)=0 then return(true) else return(false)
    )$


/* This test establishes if two expressions appear NOT to be equivalent. 
   It does so by evaluating the expressions numerically.        */
numerical_not_alg_equiv(p1, p2):= block([pvars, pval, lv, sz],
  /* We take the *union* of the two lists of variables, this way we
     hedge against comparing (x+a)+(x-a) with 2*x, which are the same. */
  pvars:listofvars([p1,p2]),
  /* Evaluate as integers to start with and avoid floats.  This is safer, and works in many cases.*/
  lv:zip_with("=", pvars, makelist(ev(k+1,simp), k, length(pvars))),
  pval:errcatch(ev(p1-p2, lv, simp)),
  if is(pval = []) then (print("STACK: ignore previous error. (p1)"), return(false)),
  if abs(first(pval)) > 1/10000 then return(true),
  /* Evaluate the difference of the expressions at each variable as floats. */
  lv:zip_with("=", pvars, makelist(float((sqrt(2)^k+k*%pi)/4), k, length(pvars))),
  /* Now we evaluate the difference of the expressions at each variable. */
  p1:errcatch(ev(float(p1), lv, numer_pbranch:true, simp)),
  if is(p1 = []) then (print("STACK: ignore previous error. (p1)"), return(false)),
  p2:errcatch(ev(float(p2), lv, numer_pbranch:true, simp)),
  if is(p2 = []) then (print("STACK: ignore previous error. (p2)"), return(false)),
  sz:errcatch(ev(abs(float(first(p1)-first(p2))), simp)),
  /* print([p1,p2,sz]), */
  if is(sz = []) then (print("STACK: ignore previous error."), return(false)),
  if first(sz) > 0.0001 then true else false)$

/* This function takes two expressions.
   It establishes if there exists a substitution of the variables of ex2 into ex1 which renders
   ex1 algebraically equivalent to ex2.
   If such a substitution exists the function returns it in a form so that

   ex2 = ev(ex1, subst_equiv(ex1, ex2))

   If no such permutation exists it returns the empty list [].
   If it could not establish this, because there are too many combinations to reasonably consider,
   then the function returns false.
*/
subst_equiv(ex1,ex2):=block([lv1, lv2, lvi, lvp, lvs, lve, il, perm_size, simp],
 simp:true,
 perm_size:4, /* This algorithm is order factorial(perm_size) and so this needs to be small. */
 lv1:setify(listofvars(ex1)),
 lv2:setify(listofvars(ex2)),
 /* If any of the variables also appear as function names we should get rid of them. 
    Otherwise we get an infinite loop.                                               */
 lv1:listify(setdifference(lv1, get_ops(ex1))),
 lv2:listify(setdifference(lv2, get_ops(ex2))),
 if length(lv1)#length(lv2) then return([]),
 /* If the lists are too long, try a weaker condition */
 /* We assume the variables which occur in both are correctly assigned. */
 /* Can we find a permutation of those left in each? */
 if length(lv1)>perm_size then (
   lv1:setify(lv1),
   lv2:setify(lv2),
   lvi:intersection(lv1, lv2),
   lv1:listify(setdifference(lv1, lvi)),
   lv2:listify(setdifference(lv2, lvi))
  ),
 if length(lv1)>perm_size then return(false),
 /*                                  */
 lvp:listify(permutations(lv2)),
 /* Create a list of subsitutions */
 lvs:map(lambda([ex], zip_with("=", lv1, ex)), lvp),
 /* Create list of expressions with which to compare ex1 */
 lve:map(lambda([ex], ev(ex1, ex)), lvs),
 lve:map(lambda([ex], ATAlgEquivfun(ex, ex2)), lve),
 lve:map(second,lve),
 lve:map(lambda([ex], equal(ex, true)),lve),
 if apply("or", lve) then (il:sublist_indices(lve, identity), lvs[il[1]]) else []
)$


/* ********************************** */
/* Simplification control             */
/* ********************************** */

/* This function recursively applys associativity to operators listed in oplist. */
/* It probably only makes sense for oplist to be ["+", "*"] or one of these two. */
STACK_assoc(ex, oplist) := block(
  if atom(ex) then return(ex),
  if member(op(ex), oplist) then return(block([ex2],
                   ex2:flatten(ex),
                   apply(op(ex2), map(lambda([ex3], STACK_assoc(ex3, oplist)), args(ex2)))
                   )),
  apply(op(ex), map(lambda([ex3], STACK_assoc(ex3, oplist)), args(ex)))
)$

/* ********************************** */
/* Noun arithmetic                    */
/* ********************************** */

/* ** Noun forms of the arithmetic functions ** */

/* These function define arithmetic functions which do
   not perform their actual mathematical functions. That is to say
   noun forms of the standard arithmetic functions. This is to
   give much finer control over the simplification of very elementary
   expressions.
   
   Chris Sangwin 21 Oct 2005.
   Chris Sangwin 7 Nov 2009, with help from JHD.
*/

/* Create noun forms of the functions of +, -, *, / and ^ 
   as follows.
   + noun+ 
   - noun- 
   * noun* 
   / noun/
   ^ noun^
*/

/* For each of these we do the following.
   (1) They are defined as infix and nary operators in Maxima
       with the binding precedences of their namesakes.
   (2) The tex() function is modified to display them exactly as
       their namesakes.  This should work with a *mix* of noun and
       active operators.
   (3) verb_arith(expr) which will replace noun versions with their
       active counterparts.
   (4) noun_arith(expr) which will replace arithmetic operators with their 
       noun counterparts.
*/

/* (1) */
nary("noun=", 150);
nary("noun+", 100);
prefix("noun-", 100);
nary("noun*", 120);
infix("noun/", 122, 123);
infix("noun^", 140, 139);
prefix("UNARY_RECIP", 100);

declare("noun*", commutative);
declare("noun+", commutative);

/* (2) */
load("noun_arith.lisp"); 

/* (3) */
declare("noun=", commutative);
declare("noun=", lassociative);
declare("noun=", rassociative);

verb_arith(ex) := block(
    ex:subst("=", "noun=", ex), 
    ex:subst("+", "noun+", ex), 
    ex:subst("*", "noun*", ex), 
    ex:subst("-", "noun-", ex), 
    ex:subst("/", "noun/", ex), 
    ex:subst("^", "noun^", ex), 
    define(UNARY_RECIP a, a^(-1)), 
    ex:ev(ex, UNARY_MINUS=-1),
    remfunction("noun+", "noun*", "noun/", "noun^", "noun-", "UNARY_RECIP"), 
    ex
)$

/* (4) */
noun_arith(ex) := block(
    ex:subst("noun=", "=", ex), 
    ex:subst("noun+", "+", ex), 
    ex:subst("noun*", "*", ex), 
    /* Unary minus really communtes with multiplication. */
    ex:subst(lambda([ex], UNARY_MINUS noun* ex), "-", ex), 
    /* Turn 1/x into x^(-1), in a special form */
    ex:subst(lambda([ex1, ex2], ex1 noun* (UNARY_RECIP ex2)), "/", ex),
    define(UNARY_RECIP a, a noun^ (-1)), 
    ex:ev(subst("noun^", "^", ex)), 
    remfunction("UNARY_RECIP"), 
    ev(ex)
)$

/* (5) Assumes we are working in the context of noun operators. */
gather_reduce(ex) := block(
    ex:subst("=", "noun=", ex), 
    ex:subst("+", "noun+", ex), 
    ex:subst("*", "noun*", ex), 
    ex:subst("-", "noun-", ex), 
    ex:ev(flatten(ex), simp),
    ex:subst("noun=", "=", ex), 
    ex:subst("noun+", "+", ex), 
    ex:subst("noun*", "*", ex), --
    ex:subst("noun-", "-", ex), 
    ex
)$

/* This function recursively applies flatten, i.e. this implements nary simplification. */
flatten_recurse_nouns(ex) := block(
    if atom(ex) then return(ex),
    if op(ex)="noun+" or op(ex)="noun*" then 
        return(flatten(apply(op(ex), maplist(flatten_recurse_nouns, args(ex))))),
    apply(op(ex), maplist(flatten_recurse_nouns, args(ex)))
)$

/* Rule which takes (a^n)^-1 when n is an integer to a^-n */
flatten_pow_minus_one(ex):= block(
   if not(safe_op(ex)="noun^") then return(ex),
   if not(second(args(ex))=-1) then return(ex),
   if safe_op(first(args(ex)))="noun^" and integerp(second(args(first(args(ex))))) then return("noun^"(first(args(first(args(ex)))),-second(args(first(args(ex)))))),
   ex
);

/* Recursive rule which takes UNARY_MINUS noun* n, where n is an integer to -n */
unary_minus_remove(ex):= block(
   if atom(ex) then return(ex),
   if safe_op(ex)="noun*" and is(first(args(ex))=UNARY_MINUS) and integerp(second(args(ex))) then return(-second(args(ex))),
   apply(op(ex), maplist(unary_minus_remove, args(ex)))
);

/*  (7)  */
/* Returns true iff ex1 and ex2 are equal up to commutativity and associativity. */
equals_commute_associate(ex1, ex2) := block([oldsimp, ex1n, ex2n, ret],
    oldsimp:simp,
    simp:false,
    ex1n:noun_arith(ex1),
    ex2n:noun_arith(ex2),
    simp:true,
    ex1n:ev(flatten_recurse_nouns(ex1n), simp),
    ex2n:ev(flatten_recurse_nouns(ex2n), simp),
    if ex1n=ex2n then ret:true else ret:false,
    simp:oldsimp,
    ret
)$

/* An answer test in the context of commutative+associative addition and multiplication. */
ATEqualComAss(sa, sb) := 
    block([Validity, RawMark, FeedBack, AnswerNote, ret, SAA, SBB],
    Validity:true, RawMark:true, FeedBack:"", AnswerNote:"",

    SAA:errcatch(ev(sa, simp, nouns)),
    if (is(SAA=[STACKERROR]) or is(SAA=[])) then 
        return([false, false, StackAddNote("", "ATEqualComAss_STACKERROR_SAns"), ""]),
    SBB:errcatch(ev(sb, simp, nouns)),
    if (is(SBB=[STACKERROR]) or is(SBB=[])) then 
        return([false,false,StackAddNote("", "ATEqualComAss_STACKERROR_TAns"), ""]),

    /* We need to check things are of the same type */
    ret:ATSameTypefun(sa,sb),
    if ret[2]=false then    
        (ret[3]:StackAddNote("ATEqualComAss: ", StackTrimNote(ret[3])), return([false, ret[2], ret[3], ret[4]]) ),
    ret:block([simp:true, ret], ATAlgEquiv(sa, sb)),
    if ret[2]=false then    
        (ret[3]:StackAddNote("ATEqualComAss: (AlgEquiv:false)", StackTrimNote(ret[3])), return([false, ret[2], ret[3], ""])),
    /* Now actually apply this test */
    if equals_commute_associate(sa, sb) then 
        (RawMark:true, AnswerNote:"")
    else
        (RawMark:false, AnswerNote:StackAddNote("","ATEqualComAss: (AlgEquiv:true)")),
    return([Validity, RawMark, AnswerNote, FeedBack])
)$

/* Legacy support for direct access to this function.  */
alias(ATEqual_com_ass, ATEqualComAss)$

/****************************************************************/
/*  Define noun versions of logical "and" and "or".             */
/****************************************************************/

nary("nounand", 65);
nary("nounor", 61);

declare("nounand", commutative);
declare("nounand", lassociative);
declare("nounand", rassociative);

declare("nounor", commutative);
declare("nounor", lassociative);
declare("nounor", rassociative);

/* A predicate to decide if we have a logical expression. */
logicp(ex) := block(
  if is(ex=true) then return(true),
  if is(ex=false) then return(true),
  if is(ex=all) then return(true),
  if is(ex=none) then return(true),
  if safe_op(ex) = "nounand" then return(true),
  if safe_op(ex) = "nounor" then return(true),
  if safe_op(ex) = "and" then return(true),
  if safe_op(ex) = "or" then return(true),
  if safe_op(ex) = "not" then return(true),
  if op_usedp(ex, "+-") then return(true),
  return(false)
)$

free_of_logicp(ex) := block([logicops, logiconsts, res, k],
   if is(ex=all) or is(ex=none) then return(false),
   logicops:["nounand", "nounor", "and", "or", "%and", "%or", "not", "%not", "+-", "<", ">", "<=", ">=", "=", "[", "{"],
   res:true,
   for k: 1 thru length(logicops) do 
       if ev(not(is(count_op(ex, logicops[k])=0)),simp) then res:false,
   return(res)
)$

/* A predicate to check if we are free of logic and inequalities. */
/* I.e. a basic algebraic expression.                             */


/* DeMorgan's laws:  
    %not(A %and B) -> %not(A) %or %not(B)
    %not(A %or B) -> %not(A) %and %not(B)  */
de_morgan(ex):=block(
   if mapatom(ex) then return(ex),
   if is(safe_op(ex)="%not") and is(safe_op(first(args(ex)))="%and") then 
            return(apply(?%or, maplist(lambda([ex2], de_morgan(%not(ex2))), args(first(args(ex)))))),
   if is(safe_op(ex)="%not") and is(safe_op(first(args(ex)))="%or") then 
            return(apply(?%and, maplist(lambda([ex2], de_morgan(%not(ex2))), args(first(args(ex)))))),
   return(apply(op(ex), maplist(de_morgan, args(ex))))
)$

/* Distribute %and over %or, i.e. A and (B or C) -> (A and B) or (A and C). */
distrib_and(ex):=block([orlisti, orlist1, orlist2],
   if mapatom(ex) then return(ex),
   if not(is(safe_op(ex)="%and")) then return(apply(op(ex), maplist(distrib_and, args(ex)))),
   orlisti:sublist_indices(args(ex), lambda([ex2], is(safe_op(ex2)="%or"))),
   if emptyp(orlisti) then return(apply(op(ex), maplist(distrib_and, args(ex)))),   
   orlist1:args(ex)[first(orlisti)],   
   orlist2:rempart(args(ex), first(orlisti)),
   distrib_and(apply(?%and, append([apply(?%or, maplist(lambda([ex2], first(orlist2) %and ex2), args(orlist1)))], rest(orlist2))))
)$

/* Normal form for logical expressions. */
logical_normal(ex):=block(
    /* Change the noun logical operators into associative indenpotent ones. */
    ex:ineqprepare(expand(ex)),
    ex:noun_solve_logic(ex),
    ex:subst("%and", "nounand", ex), 
    ex:subst("%or", "nounor", ex), 
    ex:subst("%not", "not", ex), 
    ex:subst("%and", "and", ex), 
    ex:subst("%or", "or", ex), 
    ex:de_morgan(ex),
    ex:distrib_and(ex),
    ex:logical_normal_rem_redundant(ex),
    ex:ineqprepare(expand(ex)),
    return(ex)
)$

logical_normal_rem_redundant(ex):=block(
   if mapatom(ex) then return(ex),
   if not(is(safe_op(ex)="%and")) then return(apply(op(ex), maplist(logical_normal_rem_redundant, args(ex)))),
   ex:ineq_rem_redundant(ex)   
)$

noun_solve_logic(ex):=block([ex2,ex3,exop,m,fl,p],
    if atom(ex) then return(ex),

    /* Solve an equation by factoring and joining each factor with =0 */
    if equationp(ex) then return(noun_solve_logic_equation(ex)),

    /* Solve an equation by factoring and taking even permutations of factors. */
    if inequalityp(ex) then return(inequality_factor_solve(ex)),

    /* Recurse over a logical expression. */
    if logicp(ex) or safe_op(ex) = "%and" or safe_op(ex) = "%or" then return(apply(op(ex), maplist(noun_solve_logic, args(ex)))),

    return(ex)
)$

/* Solve the equation using factor, as students would do. */
noun_solve_logic_equation(ex):=block([factorargs],
  factorargs:ev(factor(lhs(ex)-rhs(ex))),
  if atom(factorargs) then return(ex),
  if safe_op(factorargs)="*" then ex:maplist(lambda([ex2], ex2=0), factorargs)
  else return(ex),
  if is(length(ex)=1) then first(ex) else apply("nounor", ex)
)$

/* To check if two logical expressions are the same, turn them in to polynomials and work there. */
logic_to_poly(ex) := block(
    if atom(ex) then return(ex),

    /* Solve an equation by factoring and joining each factor with =0 */
    if equationp(ex) then return(lhs(ex)-rhs(ex)),

    if polynomialp(ex, listofvars(ex)) then return(ex),

    if not(logicp(ex) or safe_op(ex) = "%and" or safe_op(ex) = "%or") then return(ex),

    if safe_op(ex) = "%or" or safe_op(ex) = "nounor" or safe_op(ex) = "or" then return(apply("*", maplist(logic_to_poly, args(ex)))),

    if safe_op(ex) = "%and" or safe_op(ex) = "nounand" or safe_op(ex) = "and" then ex:(block([la, lv],
        lv:listofvars(ex),
        if not(is(length(lv)=1)) then return(ex),        
        la:maplist(logic_to_poly, args(ex)),
        logic_to_poly_helper(la, lv))),

    return(ex)
)$

logic_to_poly_helper(ex, v) := block(
    if not(listp(ex)) then return(false),
    if ex=[] or length(ex)=1 then return(ex),
    logic_to_poly_helper(append([poly_gcd(first(ex), second(ex), v)], rest(rest(ex))), v)
)$

/* ********************************** */
/* Add in a +- operator               */
/* ********************************** */

/* We have to define +- to be both a prefix and an nary operator in this order. */
prefix("+-");
nary("+-", 100);

displaypmtex(ex):=block([al, a1, a2],
  al:args(ex),
  if is(length(al)=1) then 
        return(sconcat(" \\pm ", tex1(first(al)))),
  a1:tex1(first(al)),
  a2:tex1(second(al)),
  sconcat("{", a1, " \\pm ", a2, "}")
  );
texput("+-", displaypmtex);

/* Count the occurance of an operator. */
count_op(ex, ops):= block([count],
    if atom(ex) then return(0),
    /* Can't do a ev(..., simp) here as it will simplify ex to an atom. */
    count:apply("+", maplist(lambda([ex2], count_op(ex2, ops)), args(ex))),
    if op(ex)=ops then return(1+count),
    return(count)
)$

/* Replace +- with an explicit "or" version. 
   If +- occurs more than once this is fundamentally ambiguous.
   Do we mean both + then both -, or all 4 combinations?
*/
pm_replace(ex):= block(
  if ev(is(count_op(ex, "+-")=1), simp) then return(opsubst("+", "+-", ex) nounor opsubst("-", "+-", ex)),
  return(ex)
)$


/* ********************************** */
/* Algebraic form                     */
/* ********************************** */

/* expandp(p) is true if p equals its expanded form.                 */
/* Use ev with the expand option to limit expansion of large powers .*/
/* The use of a strange argument to this function is caused by an extra evaluation within the function body.*/
expandp(expandparg):= block([simp:true], if expandparg=ev(expand(expandparg),expand(1000,1000)) then true else false)$

/* factorp(p) is true if p equals its factored form */
factorp(argfac) := block([a],
    if ev(argfac=factor(argfac), simp) then 
        return(true),
    if mapatom(argfac) then 
        return(false),
    /* Note, in Maxima factor((1-x)) = -(x-1), so we need to fix this, for learning and teaching! */
    if ev(-1*factor(argfac) = expand(-1*argfac), simp) then 
        return(true),
    if op(argfac)="^" and mapatom(part(argfac, 1)) 
        then return(true),
    if op(argfac)="^" and factorp(part(argfac, 1)) then
        return(true),
    if op(argfac)="*" then 
        return(all_listp(factorp, args(argfac))),
    return(false)
)$

/*  Write the polynomial in completed square form */
comp_square(ex,var) := block([vc],
    if not(atom(var)) or numberp(var) then (
        print("comp_square: var should be an atom but not a number.  "),
        return(ex)
    ),
    ex:ratsimp(expand(ex)),
    if not(polynomialp(ex, [var])) then (
        print("comp_square: ex should be a polynomial in var.  "),
        return(ex)
    ),
    if hipow(ex, var)#2 then (
        print("comp_square: ex should be a quadratic.  "),
        return(ex)
    ),
    delta:(coeff(ex, var, 1)^2-4*coeff(ex, var, 2)*coeff(ex, var, 0))/(4*coeff(ex, var, 2)^2),
    vc:coeff(ex, var, 1)/(2*coeff(ex, var, 2)),
    return(coeff(ex, var, 2)*((var+vc)^2-delta))
)$

/* Return the bag of factors of the expression.  I.e. strip away multiplicity of roots. */
factor_bag(ex) := block(
  if equationp(ex) then ex:ev(lhs(ex)-rhs(ex), simp),
  if not(polynomialp(ex, listofvars(ex))) then return([ex]),
  ex:ev(factor(ex), simp),
  if safe_op(ex) = "^" then return([first(args(ex))]),
  if safe_op(ex) = "*" then ex:args(ex) else ex:[ex],
  /* Strip off any powers. */
  ex:maplist(lambda([ex2], if safe_op(ex2) = "^" then first(args(ex2)) else ex2), ex),
  /* Remove any numbers. */
  ex:sublist(ex, lambda([ex2], ev(not(is(listofvars(ex2)=[])), simp))),
  return(ex)
);

/*********************/
/* Matrix operations */
/*********************/

/*
  Description : forme echelonne par lignes d'une matrice rectangulaire
    (a  coefficients dans un corps commutatif).
  Taken from http://www.math.utexas.edu/pipermail/maxima/2007/008246.html
*/

request_rational_matrix(m, pos, fn) :=
  if every('identity, map(lambda([s], every('ratnump,s)), args(m))) then true else
    print("Some entries in the matrix are not rational numbers. The result might be wrong.")$

rowswap(m,i,j) := block([n, p, r],
    require_matrix(m, "first", "rowswap"),
    require_integer(i, "second", "rowswap"),
    require_integer(j, "third", "rowswap"),
    n : length(m),
    if (i < 1) or (i > n) or (j < 1) or (j > n)
       then error("Array index out of bounds"),
    p : copymatrix(m),
    r : p[i],
    p[i] : p[j],
    p[j] : r,
    p
)$

addrow(m,i,j,k) := block([n,p],
    require_matrix(m, "first", "addrow"),
    require_integer(i, "second", "addrow"),
    require_integer(j, "third", "addrow"),
    require_rational(k, "fourth", "addrow"),
    n : length(m),
    if (i < 1) or (i > n) or (j < 1) or (j > n)
        then error("Array index out of bounds"),
    p : copymatrix(m),
    p [i] : p[i] + k * p[j],
    p
)$

rowmul(m,i,k) := block([n,p],
    require_matrix(m, "first", "addrow"),
    require_integer(i, "second", "addrow"),
    require_rational(k, "fourth", "addrow"),
    n : length(m),
    if (i < 1) or (i > n) then error("Array index out of bounds"),
    p : copymatrix(m),
    p [i] : k * p[i],
    p
)$


rref(m):= block([p,nr,nc,i,j,k,pivot,pivot_row,debug],
  debug : 0,
  request_rational_matrix(m," ","rref"),
  nc: length(first(m)),
  nr: length(m),
  if nc = 0 or nr = 0 then
    error ("The argument to 'rref' must be a matrix with one or more rows and columns"),
  p:copymatrix(m),
  ci : 1, cj : 1,
  while (ci<=nr) and (cj<=nc) do
  (
    if (debug = 1) then (
        disp(p),
        print("curseur en ligne ",ci," et colonne ",cj)),
    pivot_row : 0, pivot : 0,
    for k : ci thru nr do (
       if ( abs(p[k,cj]) > pivot ) then (
         pivot_row : k,
         pivot : abs(p[k,cj]))),
         if (debug = 1) then
       print("colonne ",cj," : pivot trouve ligne ", pivot_row,", valeur : ",pivot),
    if (pivot = 0) then (cj : cj +1)
    else (
      p : rowswap(p,ci,pivot_row),
    if (debug = 1) then      print (".. Echange : ",p),
      p : rowmul(p,ci,1/p[ci,cj]),
    if (debug = 1) then     print (".. Normalisation : ",p),
      for k : 1 thru nr do (
         if not (k=ci) then (p : addrow (p,k,ci,-p[k,cj]))),
      ci : ci+1, cj : cj+1)),
  p
)$

/* ********************************** */
/* Analysis tests                     */
/* ********************************** */

/* This determines if an expression is continuous
   ex the expression,
   v  the variable,
   xp the point at which to evaluate. */
continuousp(ex, v, xp) := block([lp, lm],
    lp: ev(limit(ex, v, xp, minus), simp),
    lm: ev(limit(ex,v,xp,plus),simp),
    /* print(lp), print(lm), */
    if  lp # und
       and lm # und
       and lp # ind
       and lm # ind
       and lp # inf
       and lm # inf
       and lp # minf
       and lm # minf
       and lp = lm
        then true else false
)$


/* This determines if an expression is differentiable
   ex the expression,
   v  the variable,
   xp the point at which to evaluate,
   n  the number of times it is differentiated (optional).
*/
diffp(ex,[args]) := block([v, xp, n],
   v:args[1],
   xp:args[2],
   n:1,
   if length(args)=3 then n:args[3],
   return(continuousp(diff(ex, v, n), v, xp))
)$

/* ********************************** */
/* Buggy rules                        */
/* ********************************** */


/* (a+b)^n -> a^n+b^n */
buggy_pow(ex) := block([ex_ex],
    if mapatom(ex) then return(ex),
    if op(ex)="/" and atom(part(ex, 2))#true and op(part(ex, 2))="+" then return(map(lambda([ex2],part(ex, 1)/ex2), part(ex, 2))),
    if mapatom(part(ex, 1)) or op(part(ex, 1))#"+" then return(map(buggy_pow, ex)),
    if op(ex)="^" then return(map(lambda([ex2], ex2^buggy_pow(part(ex, 2))), map(buggy_pow, part(ex, 1)))),
    if op(ex)=sqrt then return(map(sqrt, map(buggy_pow, part(ex, 1))))
)$

/* Naive adding of fractions! But see Farey sequences. */
mediant(ex1,ex2) := (num(ex1)+num(ex2))/(denom(ex1)+denom(ex2));

/***********************************************************************/
/* Establish an argument and display it together with equivalences.    */
/***********************************************************************/

texput(EMPTYCHAR, "\\ ");
texput(EQUIVCHAR, "\\color{green}{\\Leftrightarrow}");
texput(IMPLIESCHAR, "\\color{red}{\\Rightarrow}");
texput(IMPLIEDCHAR, "\\color{red}{\\Leftarrow}");
texput(EQUIVZERO, "\\color{red}{0\\quad\\mbox{(?)}}");
/* Here we add tags.  These are for localisation.  Dealt with on the PHP side in cassession -> instantiate. */
texput(SAMEROOTS, "\\color{green}{\\mbox{!SAMEROOTS!}}");
texput(ANDOR, "\\color{red}{\\mbox{!ANDOR!}}");
texput(MISSINGVAR, "\\color{red}{\\mbox{!MISSINGVAR!}}");


/* We assume the token "all" is the set of real numbers, and "none" means it is empty. */
declare(all, constant);
texput(all, "\\mathbb{R}");

declare(none, constant);
texput(none, "\\emptyset");

/* This function actually evaluates the correctness of an argument "ex".                       */
/* It answers the question, "Is this list of steps correct reasoning by equivalence?".         */
/* Display, fitness to a model and other functions are separate, and all rely on this.         */
/* Each line of the matrix is as follows:                                                      */
/* [equiv?, symbol, expression, note].                                                         */
/* Where                                                                                       */
/* Boolean: equiv is whether this line is equivalent to the **previous** line. Line 1 is true. */
/* Expr: symbol, is a symbol which may or may not be displayed.                                */
/* Expr: expression, is the line of the argument.                                              */
/* String: note is some deugging information.                                                  */
stack_eval_arg(ex) := block([eqoutcome, eqoutsymb, eqoutnote, res, id, truthargument, tempnote, exmod, SA, SAL, SB, SBL, malrulecont],
  if not(listp(ex)) then (print("stack_disp_arg expects to receive a list."), return(false)),
  if emptyp(ex) then return(matrix([true, EMPTYCHAR, [], ""])),
  if length(ex)=1 then return(matrix([true, EMPTYCHAR, first(ex), ""])),
  /* Set up empty rows to hold the answer. */
  eqoutcome:makelist(false, length(ex)), 
  eqoutsymb:makelist(QMCHAR, length(ex)), 
  eqoutnote:makelist("", length(ex)), 
  eqoutcome[1]:null,
  eqoutsymb[1]:EMPTYCHAR,
  /* Loop and sort out expressions. */
  exmod:copy(ex),
  for id:1 thru length(ex) step 1 do block([SA, tempnote],
     SA:exmod[ev(id, simp)],
     if stack_eval_arg_equivzerop(ex) then SA:SA=0,
     if ev(is(count_op(SA,"+-")=1), simp) then SA:pm_replace(SA),
     exmod[ev(id, simp)]:SA
  ),
  if debug then print(exmod),
  /* Loop and check adjacent expressions for equivalence. */
  for id:2 thru length(ex) step 1 do block([ATres, SA, SB, SAO, SBO],
      tempnote:"",
      SA:exmod[ev(id-1, simp)],
      SB:exmod[ev(id, simp)],
      /* Reduce the range of options. Avoid sets, since Maxima 5.38.1 has a bug.         */
      /* As far as resoning by equivalence is concerned, {}=[]=false=none and true=all.  */
      if is(emptyp(SA)) or is(SA=false) then SA:none,
      if is(emptyp(SB)) or is(SB=false) then SB:none,
      if is(SA=true) then SA:all,
      if is(SB=true) then SB:all,

      if (debug) then print("-------------------------------"),
      if (debug) then print("Line: ", ev(id-1,simp)),
      if (debug) then print(SA),
      if (debug) then print(SB),
      SAO:SA,
      SBO:SB,
      /* Strings break up an argument into independent blocks. */
      if stringp(SA) or stringp(SB) then block(
          eqoutsymb[ev(id, simp)]:EMPTYCHAR,
          eqoutcome[ev(id, simp)]:unknown
      ) else (
          /* First we try to turn things into polynomials.  Much more reliable equivalence checking. */
          if (logicp(SA)) then block(
              SA:logic_to_poly(SA),
              if ev(free_of_logicp(SA), simp) then SA:ev(SA=0, simp),
              tempnote:sconcat(tempnote, "SApoly. ")
          ),
          if (logicp(SB)) then block(
              SB:logic_to_poly(SB),
              if ev(free_of_logicp(SB), simp) then SB:ev(SB=0, simp),
              tempnote:sconcat(tempnote, "SBpoly. ")
          ),
          if (debug) then print("Turn to polynomials."),
          if (debug) then print(SA),
          if (debug) then print(SB),

          /* Now check for equivalences. */
          tempnote:sconcat(tempnote, "SA: ", string(SA), "; "),
          tempnote:sconcat(tempnote, "SB: ", string(SB), "; "),
          if (debug) then print("ATAlgEquiv(", string(SA), ", ", string(SB), ");"),
          ATres:ATAlgEquiv(SA, SB),
          if (debug) then print(ATres),
          if second(ATres) then block(
              eqoutcome[ev(id, simp)]:true,
              eqoutsymb[ev(id, simp)]:EQUIVCHAR,
              eqoutnote[ev(id, simp)]:sconcat(tempnote, " | ATAlgEquiv_true | ", third(ATres))
          ) else (
             /* Normally the ATAlgEquiv test doesn't force everything to logic.  */
             /* But here we do when able to do so safely.                        */
             SAL:SA,
             SBL:SB,
             if (equationp(SA) or inequalityp(SA) or logicp(SA)) then block(
                 SAL:ev(noun_solve_logic(SA), simp),
                 tempnote:sconcat(tempnote, "SAsolved: ", string(SAL), ". ")
                ),
             if (equationp(SB) or inequalityp(SB) or logicp(SB)) then block(
                 SBL:ev(noun_solve_logic(SB), simp),
                 tempnote:sconcat(tempnote, "SBsolved: ", string(SBL), ". ")
                ),
             if (debug) then print("ATLogic(", string(SAL), ", ", string(SBL), ");"),
             ATres:ev(ATLogic(SAL, SBL), simp),
             if (debug) then print(ATres),
             if (second(ATres)) then block(
                 eqoutcome[ev(id, simp)]:true,
                 eqoutsymb[ev(id, simp)]:EQUIVCHAR
             ),
             eqoutnote[ev(id, simp)]:sconcat(tempnote, third(ATres))
          ),

          /* Can we work out what has gone wrong?  */
          if (debug) then print("** Checking for common mistakes **"),
          if (debug) then print(SA),
          if (debug) then print(SB),
          malrulecont:not(eqoutcome[ev(id, simp)]),
          /* In the edge cases we don't look for malrules.  Edge cases are turned into equations.  */
          if is(lhs(SA)=all) or is(lhs(SB)=all) or is(lhs(SA)=none) or is(lhs(SB)=none) then
              malrulecont:false,

          if malrulecont then block([FBA, FBB, ATres],
              /* (0) Multiplicity of roots. */
              FBA:factor_bag(SA),
              FBB:factor_bag(SB),
              if (debug) then print("Factor bags: ", string(FBA), "; ", string(FBB), "; "),
              FBA:apply("*", FBA),
              FBB:apply("*", FBB),
              ATres:ATAlgEquiv(FBA, FBB),
              if (debug) then print(ATres),
              if second(ATres) then block(
                  malrulecont:false,
                  eqoutcome[ev(id, simp)]:true,
                  eqoutsymb[ev(id, simp)]:SAMEROOTS,
                  eqoutnote[ev(id, simp)]:sconcat(tempnote, " | SAMEROOTS | ", third(ATres))
              )
          ),

          if malrulecont then block([FBA, ATres],
              /* (1.1) And/or errors. */
              FBA:exmod[ev(id, simp)],
              if safe_op(FBA) = "nounand" then block(
                  FBA:apply("nounor", args(FBA)),
                  FBA:noun_solve_logic(FBA),
                  ATres:ev(ATLogic(SA, FBA), simp),
                  if (debug) then print("Checking for AND/OR:", ATres),
                  if (second(ATres)) then block( 
                      malrulecont:false,
                      eqoutcome[ev(id, simp)]:false,
                      eqoutsymb[ev(id, simp)]:ANDOR,
                      eqoutnote[ev(id, simp)]:sconcat(tempnote, " | ANDOR ")
                  )
              )
          ),

          if malrulecont then block([FBA, ATres],
              /* (1.1) And/or errors. */
              FBA:exmod[ev(id, simp)],
              if safe_op(FBA) = "nounor" then block(
                  FBA:apply("nounand", args(FBA)),
                  FBA:noun_solve_logic(FBA),
                  ATres:ev(ATLogic(SA, FBA), simp),
                  if (debug) then print("Checking for AND/OR:", ATres),
                  if (second(ATres)) then block( 
                      malrulecont:false,
                      eqoutcome[ev(id, simp)]:false,
                      eqoutsymb[ev(id, simp)]:ANDOR,
                      eqoutnote[ev(id, simp)]:sconcat(tempnote, " | ANDOR ")
                  )
              )
          ),

          if malrulecont then block([FBA, ATres],
              /* (1.3) MISSINGVAR. */
              FBA:stack_validate_missing_assignment(SBO),
              if first(FBA) then block(
                  FBA:noun_solve_logic(second(FBA)),
                  ATres:ev(ATLogic(SA, FBA), simp),
                  if (debug) then print("Checking for MISSINGVAR", [SA, FBA]),
                  if second(ATres) then block( 
                      malrulecont:false,
                      eqoutcome[ev(id, simp)]:false,
                      eqoutsymb[ev(id, simp)]:MISSINGVAR,
                      eqoutnote[ev(id, simp)]:sconcat(tempnote, " | MISSINGVAR ")
                  )
              )
          ),

          if malrulecont then block(
              /* (2) Squared both sides. */
              SBL:ev(SB^2,simp),
              if (debug) then print("ATAlgEquiv(", string(SA), ", ", string(SBL), ");"),
              ATres:ATAlgEquiv(SA, SBL),
              if (debug) then print(ATres),
              if second(ATres) then block(
                  eqoutcome[ev(id, simp)]:false,
                  eqoutsymb[ev(id, simp)]:IMPLIEDCHAR,
                  eqoutnote[ev(id, simp)]:sconcat(tempnote, " | SquaredSecond | ", third(ATres))
              ),
              SAL:ev(abs(SA),simp),
              SBL:ev(SB^2,simp),
              /* (3) Square both sides and abs.  */
              if (debug) then print("ATAlgEquiv(", string(SAL), ", ", string(SBL), ");"),
              ATres:ATAlgEquiv(SA, SBL),
              if (debug) then print(ATres),
              if second(ATres) then block(
                  if assume_pos then block(
                      eqoutcome[ev(id, simp)]:true,
                      eqoutsymb[ev(id, simp)]:EQUIVCHAR,
                      eqoutnote[ev(id, simp)]:sconcat(tempnote, " | SquaredSecondEquiv | ", third(ATres))
                  ) else block(
                      eqoutcome[ev(id, simp)]:false,
                      eqoutsymb[ev(id, simp)]:IMPLIEDCHAR,
                      eqoutnote[ev(id, simp)]:sconcat(tempnote, " | SquaredSecond+abs| ", third(ATres))
                  )
              ),
              /* (4) Squared both sides. */
              SAL:ev(SA^2,simp),
              if (debug) then print("ATAlgEquiv(", string(SAL), ", ", string(SB), ");"),
              ATres:ATAlgEquiv(SAL, SB),
              if (debug) then print(ATres),
              if second(ATres) then block(
                  if assume_pos then block(
                      eqoutcome[ev(id, simp)]:true,
                      eqoutsymb[ev(id, simp)]:EQUIVCHAR,
                      eqoutnote[ev(id, simp)]:sconcat(tempnote, " | SquaredFirstEquiv | ", third(ATres))
                  ) else block(
                      eqoutcome[ev(id, simp)]:false,
                      eqoutsymb[ev(id, simp)]:IMPLIESCHAR,
                      eqoutnote[ev(id, simp)]:sconcat(tempnote, " | SquaredFirst | ", third(ATres))
                  )
              ),

              /* (5) Square both sides and abs.  */
              SAL:ev(SA^2,simp),
              SBL:ev(abs(SB),simp),
              if (debug) then print("ATAlgEquiv(", string(SAL), ", ", string(SBL), ");"),
              ATres:ATAlgEquiv(SA, SBL),
              if (debug) then print(ATres),
              if second(ATres) then block(
                  eqoutcome[ev(id, simp)]:false,
                  eqoutsymb[ev(id, simp)]:IMPLIESCHAR,
                  eqoutnote[ev(id, simp)]:sconcat(tempnote, " | Squaredfirst+abs| ", third(ATres))
              )
          )

      ),
      if (debug) then print("Outcome: ", eqoutcome[ev(id, simp)]),
      if (debug) then print("Note: ", eqoutnote[ev(id, simp)])
  ),
  res:matrix(eqoutcome, eqoutsymb, ex, eqoutnote),
  return(transpose(res))
);

/* This modifies stack_eval_arg to create something which can be displayed. */
stack_eval_equiv_arg(ex, showlogic, equivdebug, debuglist) := block([A, k, ret, res, exnew, eqoutsymb, note], 
    /* Evaluate the argument.      */
    A:transpose(stack_eval_arg(ex)),
    /* If in debug mode check if we have what we expect. */
    eqoutsymb:A[2],
    /* Unit test the eval_arg code. */
    if listp(debuglist) then block([simp, eqoutsymb, k],
        eqoutsymb:A[2],
        if is(length(eqoutsymb)=length(debuglist)) then block(
            simp:true,
            for k:2 thru length(eqoutsymb) step 1 do block([ATres, SA, SB],
                if not(is(eqoutsymb[k]=debuglist[k])) then
                    eqoutsymb[k]:[eqoutsymb[k], expected(debuglist[k])]
            )
        ) else (
            print("ERROR, disp_stack_eval_arg: length of debuglist is ", string(length(debuglist)), ", but the length of the argument is ", string(length(eqoutsymb)), ".") 
        )
    ),
    /* Modify input expressions for implied equivalence to zero. */
    exnew:maplist(lambda([ex2], if stack_eval_arg_equivzerop(ex2) then ex2=EQUIVZERO else ex2), A[3]),
    ret:[exnew],
    /* If we are not showing logical connectives, then suppress them. */
    if showlogic then ret:append([eqoutsymb], ret),
    if equivdebug then ret:append(ret, [A[4]]),
    /* Switch off matrix brackets. */
    lmxchar:"",
    ret:apply(matrix, ret),
    ret:transpose(ret),
    ret:apply(argument, args(ret)),
    /* Construct a separate note. The note should be the same length as the argument, so normally has "EMPTYCHAR" as the first entry.*/
    note:second(A),
    /* Decide if the overall argument is true. */
    res:first(A),
    if elementp(unknown, setify(res)) then 
        res:unknown
    else
        res:apply("and", rest(res)),
    return([res, ret, note])
)$

/* A predicate to decide if we should equate to zero. */
stack_eval_arg_equivzerop(ex) := block(
   if is(ex=true) or is(ex=false) then return(false),
   if emptyp(ex) or is(ex=all) then return(false),
   if expressionp(ex) and not(stringp(ex)) then return(true),
   return(false)
)$

/* This modifies stack_eval_arg to create something which can be displayed. */
disp_stack_eval_arg(ex, showlogic, equivdebug, debuglist) := block([A],
    A:stack_eval_equiv_arg(ex, showlogic, equivdebug, debuglist),
    return(second(A))
)$

/* This modifies stack_eval_arg to create something which can be displayed. */
stack_disp_arg(ex, showlogic) := block([A],
    A:stack_eval_equiv_arg(ex, showlogic, false, false),
    return(second(A))
)$

check_stack_eval_arg(ex) := block([ret], 
    /* Evaluate the argument.      */
    if length(ex)<2 then return(true),
    ret:stack_eval_equiv_arg(ex, false, false, false),
    return(first(ret))
)$

/* An answer test based on equivalence reasoning. */
ATEquiv(SA,SB) := block([SAA, SAB, ret, A, AnswerNote, FeedBack],

    /* Turn on simplification and error catch. */
    SAA:errcatch(ev(SA, simp, nouns)),
    if (is(SAA=[STACKERROR]) or is(SAA=[])) then 
        return([false, false, StackAddNote("", "ATEquiv_STACKERROR_SAns"), ""]),
    SAB:errcatch(ev(SB, simp, nouns)),
    if (is(SAB=[STACKERROR]) or is(SAB=[])) 
        then return([false, false, StackAddNote("", "ATEquiv_STACKERROR_TAns"), ""]),

    /* Are both answers lists? */
    if not listp(SA) then
        (print("TEST_FAILED"), return(StackBasicReturn(false, false, "ATEquiv_SA_not_list"))),
    if not listp(SB) then
        (print("TEST_FAILED"), return(StackBasicReturn(false, false, "ATEquiv_SB_not_list"))),

    /* Actually perform the test.  */
    A:stack_eval_equiv_arg(SA, true, false, false),
    AnswerNote:third(A), 
    FeedBack:stack_disp(second(A), "d"),

    ret:[true, first(A), AnswerNote, FeedBack],
    return(ret)
)$

/* An answer test based on equivalence reasoning. */
ATEquivFirst(SA,SB) := block([SAA, SAB, ret, A, AnswerNote, FeedBack],

    /* Turn on simplification and error catch. */
    SAA:errcatch(ev(SA, simp, nouns)),
    if (is(SAA=[STACKERROR]) or is(SAA=[])) then 
        return([false, false, StackAddNote("", "ATEquivFirst_STACKERROR_SAns"), ""]),
    SAB:errcatch(ev(SB, simp, nouns)),
    if (is(SAB=[STACKERROR]) or is(SAB=[])) 
        then return([false, false, StackAddNote("", "ATEquivFirst_STACKERROR_TAns"), ""]),

    /* Are both answers lists? */
    if not listp(SA) then
        (print("TEST_FAILED"), return(StackBasicReturn(false, false, "ATEquivFirst_SA_not_list"))),
    if not listp(SB) then
        (print("TEST_FAILED"), return(StackBasicReturn(false, false, "ATEquivFirst_SB_not_list"))),

    ret:ATEqualComAss(first(SA), first(SB)),
    if not(second(ret)) then
         return([false, false, "ATEquivFirst_SA_wrong_start", StackAddFeedback("", "ATEquivFirst_SA_wrong_start", stack_disp(first(SB), "i"))]),

    /* Actually perform the test.  */
    A:stack_eval_equiv_arg(SA, true, false, false),
    AnswerNote:third(A), 
    FeedBack:stack_disp(second(A), "d"),

    ret:[true, first(A), AnswerNote, FeedBack],
    return(ret)
)$

/* ********************************** */
/* Answer tests                       */
/* ********************************** */

AnswerTests : [AlgEquiv, EqualComAss, CasEqual, SameType, SubstEquiv, SysEquiv, Expanded, FacForm, SingleFrac, PartFrac, CompSquare, Equiv, EquivFirstLast, GT, GTE, NumAbsolute, NumRelative, NumSigFigs, LowestTerms, Diff, Int, String, StringSloppy, RegExp]$ 
