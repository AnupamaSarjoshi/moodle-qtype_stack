<?php
// This file is part of Stack - http://stack.maths.ed.ac.uk/
//
// Stack is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Stack is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Stack.  If not, see <http://www.gnu.org/licenses/>.

defined('MOODLE_INTERNAL') || die();

require_once(__DIR__ . '/../locallib.php');
require_once(__DIR__ . '/../stack/cas/casstring.class.php');

// Unit tests for {@link stack_cas_casstring}.
// @copyright  2012 The University of Birmingham.
// @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later.
// @group qtype_stack.

/**
 * @group qtype_stack
 */
class stack_cas_casstring_test extends basic_testcase {

    public function test_units_1() {
        $s = 'sa:3.14*mol';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertTrue($at1->get_valid('s', true, 0));
    }

    public function test_units_2() {
        $s = 'sa:3.14*moles';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('forbiddenVariable', $at1->get_answernote());
    }

    public function test_units_2_u() {
        $s = 'sa:3.14*moles';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('unitssynonym', $at1->get_answernote());
    }

    public function test_units_3() {
        $s = 'sa:3.14*Moles';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('forbiddenVariable', $at1->get_answernote());
    }

    public function test_units_3_u() {
        $s = 'sa:3.14*Moles';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('unitssynonym', $at1->get_answernote());
    }

    public function test_units_allow_moles() {
        $s = 'sa:3.14*moles';
        $at1 = new stack_cas_casstring($s);
        $secrules = new stack_cas_security();
        $secrules->set_allowedwords('moles');
        $this->assertTrue($at1->get_valid('s', true, 0, $secrules));
    }

    public function test_units_4() {
        $s = '52.3*km';
        $at1 = new stack_cas_casstring($s);
        $this->assertTrue($at1->get_valid('s', true, 0));
    }

    public function test_units_5() {
        $s = 'sa:52.3*MHz';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertTrue($at1->get_valid('s', true, 0));
    }

    public function test_units_6() {
        $s = 'sa:52.3*Mhz';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('unknownUnitsCase', $at1->get_answernote());
        $err = 'Input of units is case sensitive:  <span class="stacksyntaxexample">Mhz</span> is an unknown unit. '
                   . 'Did you mean one from the following list <span class="stacksyntaxexample">[mHz, MHz]</span>?';
        $this->assertEquals($err, $at1->get_errors());
    }

    public function test_units_7() {
        $s = '56.7*hr';
        $at1 = new stack_cas_casstring($s);
        $this->assertTrue($at1->get_valid('s', true, 0));
        $this->assertEquals('56.7*hr', $at1->get_casstring());
        $this->assertEquals('', $at1->get_key());
        $this->assertEquals('', $at1->get_answernote());
    }

    public function test_units_8() {
        $s = '56.7*hr';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('56.7*hr', $at1->get_casstring());
        $this->assertEquals('', $at1->get_key());
        $this->assertEquals('unitssynonym', $at1->get_answernote());
    }

    public function test_units_9() {
        $s = '56.7*kgm/s';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('56.7*kgm/s', $at1->get_casstring());
        $this->assertEquals('', $at1->get_key());
        $this->assertEquals('forbiddenVariable', $at1->get_answernote());
    }

    public function test_units_10() {
        $s = '56.7*kgm/s';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertTrue($at1->get_valid('s', true, 0));
        $this->assertEquals('56.7*kg*m/s', $at1->get_casstring());
        $this->assertEquals('', $at1->get_key());
        $this->assertEquals('', $at1->get_answernote());
    }

    public function test_units_amu() {
        $s = '520*amu';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true); // If we do not toggle units then amu if forbiddenly long.
        $this->assertTrue($at1->get_valid('s', true, 0));
    }

    public function test_units_mamu() {
        $s = '520*mamu';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true); // If we do not toggle units then mamu if forbiddenly long.
        $this->assertFalse($at1->get_valid('s', true, 0));
    }

    public function test_units_mmhg() {
        $s = '7*mmhg';
        $at1 = new stack_cas_casstring($s);
        $at1->set_context('units', true);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('unknownUnitsCase', $at1->get_answernote());
        $err = 'Input of units is case sensitive:  <span class="stacksyntaxexample">mmhg</span> is an unknown unit. '
                   . 'Did you mean one from the following list <span class="stacksyntaxexample">[mmHg]</span>?';
        $this->assertEquals($err, $at1->get_errors());
    }

    public function test_spaces_0_insertneeded() {
        $s = '3sin(a+b)';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('3*sin(a+b)', $at1->get_casstring());
        $err = 'You seem to be missing * characters. Perhaps you meant to type '
                .'<span class="stacksyntaxexample">3<font color="red">*</font>sin(a+b)</span>.';
                $this->assertEquals($err, $at1->get_errors());
                $this->assertEquals('missing_stars', $at1->get_answernote());
    }

    public function test_spaces_0_insertneeded_andspace() {
        $s = '3sin(a b)';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 0));
        $this->assertEquals('3*sin(a*b)', $at1->get_casstring());
        $err = 'You seem to be missing * characters. Perhaps you meant to type <span class="stacksyntaxexample">3<font color="red">*</font>sin(a*b)</span>. Illegal spaces found in expression <span class="stacksyntaxexample">3*sin(a<font color="red">_</font>b)</span>.';
                        $this->assertEquals($err, $at1->get_errors());
                        $this->assertEquals('missing_stars | spaces', $at1->get_answernote());
    }

    public function test_spaces_1_insertneeded_andspace() {
        $s = '3sin(a b)';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 1));
        $this->assertEquals('3*sin(a*b)', $at1->get_casstring());
        $err = 'You seem to be missing * characters. Perhaps you meant to type <span class="stacksyntaxexample">3<font color="red">*</font>sin(a*b)</span>. Illegal spaces found in expression <span class="stacksyntaxexample">3*sin(a<font color="red">_</font>b)</span>.';
        $this->assertEquals($err, $at1->get_errors());
        $this->assertEquals('missing_stars | spaces', $at1->get_answernote());
    }

    public function test_spaces_3_insertneeded_andspace() {
        $s = '3sin(a b)';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 3));
        $this->assertEquals('3*sin(a*b)', $at1->get_casstring());
        $err = 'You seem to be missing * characters. Perhaps you meant to type <span class="stacksyntaxexample">3<font color="red">*</font>sin(a*b)</span>. Illegal spaces found in expression <span class="stacksyntaxexample">3*sin(a<font color="red">_</font>b)</span>.';
        $this->assertEquals($err, $at1->get_errors());
        $this->assertEquals('missing_stars | spaces', $at1->get_answernote());
    }

    public function test_spaces_4_insertneeded_andspace() {
        $s = '3sin(a b)';
        $at1 = new stack_cas_casstring($s);
        $this->assertTrue($at1->get_valid('s', true, 4));
        $this->assertEquals('3*sin(a*b)', $at1->get_casstring());
        $this->assertEquals('missing_stars | spaces', $at1->get_answernote());
    }

    public function test_spaces_5_insertneeded_andspace_trigexp() {
        $s = '3sin^3(ab)';
        $at1 = new stack_cas_casstring($s);
        $this->assertFalse($at1->get_valid('s', true, 4));
        $this->assertEquals('3*sin^3*(ab)', $at1->get_casstring());
        $this->assertEquals('missing_stars | trigexp', $at1->get_answernote());
    }

    public function test_spaces_4_insertneeded_true() {
        $s = '3b(x y)';
        $at1 = new stack_cas_casstring($s);
        $this->assertTrue($at1->get_valid('s', true, 4));
        $this->assertEquals('3*b(x*y)', $at1->get_casstring());
        $this->assertEquals('missing_stars | spaces', $at1->get_answernote());
    }

    public function test_spaces_4_insertneeded_true_2() {
        $s = '3sin(a b)';
        $at1 = new stack_cas_casstring($s);
        $this->assertTrue($at1->get_valid('s', true, 4));
        $this->assertEquals('3*sin(a*b)', $at1->get_casstring());
    }


    public function test_log_key_vals_1() {
        $s = 'log_x:log_x(a)';
        $at1 = new stack_cas_casstring($s);
        $this->assertTrue($at1->get_valid('s', true, 0));
        $this->assertEquals('lg(a,x)', $at1->get_casstring());
        $this->assertEquals('log_x', $at1->get_key());
        $this->assertEquals('logsubs', $at1->get_answernote());
    }
