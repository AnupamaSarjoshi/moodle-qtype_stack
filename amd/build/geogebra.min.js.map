{"version":3,"file":"geogebra.min.js","sources":["../src/geogebra.js"],"sourcesContent":["/**\n * geogebra embedding used by geogebra.block.php\n * derived by jsxGraph STACK implementation\n * @copyright  2022 University of Edinburgh\n * @author     Tim Lutz\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/// NOTE! This code does eval() a string with no validation.\n// So lets hope this is the correct way to name a Moodle AMD module\ndefine([\"qtype_stack/geogebracore-lazy\"], function(GEOGEBRA) {\n    return {\n\n            find_input_id: function(divid, name) {\n                if(GEOGEBRA){}//GEOGEBRA variable: deprecated and not used any more\n                var tmp = document.getElementById(divid);\n                while ((tmp = tmp.parentElement) && !(tmp.classList.contains(\"formulation\") &&\n                        tmp.parentElement.classList.contains(\"content\"))) {}\n                tmp = tmp.querySelector('input[id$=\"_' + name + '\"]');\n                // We use this function to also tie into the change tracking of Moodle.\n                // We do it here so that all possible code written by authors will also be tracked.\n                // The author just needst to generate a change event they do not need to know how the VLE works.\n                tmp.addEventListener('change', function() {\n                    M.core_formchangechecker.set_form_changed();\n                });\n                return tmp.id;\n            },\n            bind_point: function(inputRef, appletRef, pointname) {\n                // This function takes a GeoGebra point object and binds its coordinates to a given STACK input.\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the point to it.\n                    // the value is stored as a list of float values e.g. \"[1,0.43]\"\n                    var coords = JSON.parse(theInput.value);\n                    try {\n                        appletRef.setCoords(pointname,coords[0],coords[1]);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                }\n\n                var initialX = appletRef.getXcoord(pointname);\n                var initialY = appletRef.getYcoord(pointname);\n\n                /**\n                * Then the binding from graph to input\n                */\n                function updateValues(){\n\n                    var pointx = appletRef.getXcoord(pointname);\n                    var pointy = appletRef.getYcoord(pointname);\n\n                    if (initialX !== pointx || initialY !== pointy) {\n                        var tmp = JSON.stringify([pointx, pointy]);\n                        initialX = false; // ignore these after initial change.\n                        initialY = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n\n                        }\n                    }\n                }\n              setInterval(updateValues, 300);//time based listening is the only option because we can not listen to single objects\n\n                var lastValue = JSON.stringify([appletRef.getXcoord(pointname), appletRef.getYcoord(pointname)]);\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0] == 'number' && typeof tmp[1] == 'number') {\n                                appletRef.setCoords(pointname,tmp);\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0] == 'number' && typeof tmp[1] == 'number') {\n                                appletRef.setCoords(pointname,tmp);\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n            },\n            bind_value: function(inputRef, appletRef, valuename) {\n                // This function takes a GeoGebra name of a value object and binds its value to a given input.\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the valuename to it.\n                    // the value is stored as a float value \"0.43\"\n                    try {\n                        appletRef.setValue(valuename,JSON.parse(theInput.value));\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                }\n\n                var initialValue = appletRef.getValue(valuename);\n                /**\n                * Then the binding from graph to input\n                */\n                function updateValues(){\n                  // We do not want to set the input before the point actually moves.\n                  if (initialValue != appletRef.getValue(valuename)) {\n                      var tmp = JSON.stringify(appletRef.getValue(valuename));\n                      initialValue = false;\n                      if (theInput.value != tmp) {\n                          // Avoid resetting this, as some event models migth trigger\n                          // change events even when no change actually happens.\n                          theInput.value = tmp;\n                          // As we set the inputs value programmatically no events\n                          // will be fired. But for two way binding we want to fire them...\n                          // However we do not need this in the preview where it annoys people.\n                          if (window.location.pathname.indexOf('preview.php') === -1) {\n                              var e = new Event('change');\n                              theInput.dispatchEvent(e);\n                          }\n                      }\n                  }\n                }\n                setInterval(updateValues, 300);//time based listening is the only option because we can not listen to single objects\n\n                var lastValue = JSON.stringify(appletRef.getValue(valuename));\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    if (theInput.value !== lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp == 'number') {\n                                appletRef.setValue(valuename,tmp);\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    if (theInput.value !== lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp == 'number') {\n                                appletRef.setValue(valuename,tmp);\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n            },\n            bind_value_to_remember_JSON: function(inputRef, appletRef, valuename) {\n                //This function takes a GeoGebra name of a value object and binds its value to a given input.\n                //bind_value_to_remember_JSON will manage bindings,\n                //even if more than one GeoGebra object is bound to the same STACK input reference.\n                //This function is created for the \"remember\" tag,\n                //which stores more than one value in a single input field\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the valuename to it.\n                    // the value is stored as a float value \"0.43\"\n                    try {\n                        appletRef.setValue(valuename,JSON.parse(theInput.value)[valuename]);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                }\n\n                var initialValue = appletRef.getValue(valuename);\n\n                /**\n                * Then the binding from graph to input\n                */\n                function updateValues(){\n                  // We do not want to set the input before the point actually moves.\n                  // but we have to initialize JSON with \"{}\"\n                  if(theInput.value.trim().length === 0){\n                    theInput.value=\"{}\";\n                  }\n                  if (initialValue != appletRef.getValue(valuename)) {\n                      var tmpValue = appletRef.getValue(valuename);\n                      initialValue = false;\n                      //check if geogebraname is listed in JSON\n                      try{\n                            var lastinput = JSON.parse(theInput.value);\n                        } catch(err){\n                            //We do not care about this\n                        }\n                        if(!lastinput || !lastinput[valuename] || lastinput[valuename] != tmpValue){\n                            // Avoid resetting this, as some event models might trigger\n                            // change events even when no change actually happens.\n\n                            //overwriting value in last object\n                            lastinput[valuename] = tmpValue;\n                            //saving as JSON string\n                            theInput.value = JSON.stringify(lastinput);\n\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                    var e = new Event('change');\n                                    theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                }\n                setInterval(updateValues, 300);//time based listening is the only option because we can not listen to single objects\n\n                var lastValue = JSON.stringify(appletRef.getValue(valuename));\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    try {\n                        var tmp = JSON.parse(theInput.value);\n                        if (JSON.stringify(tmp[valuename]) !== lastValue) {\n                            // Only when something changed.\n                            if (typeof tmp[valuename] == 'number') {\n                                appletRef.setValue(valuename,tmp[valuename]);\n                            }\n                        }\n                        lastValue = JSON.stringify(tmp[valuename]);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    try {\n                        var tmp = JSON.parse(theInput.value);\n                        if (tmp[valuename] !== lastValue) {\n                            // Only when something changed.\n                            if (typeof tmp[valuename] == 'number') {\n                                appletRef.setValue(valuename,tmp[valuename]);\n                            }\n                        lastValue = JSON.stringify(tmp[valuename]);\n                        }\n                    } catch (err){\n                            // We do not care about this.\n                    }\n                });\n            },\n            bind_point_to_remember_JSON: function(inputRef, appletRef, pointname) {\n                // This function takes a GeoGebra point object and binds its coordinates to a given STACK input.\n                //bind_point_to_remember_JSON will manage bindings,\n                //even if more than one GeoGebra object is bound to the same STACK input reference.\n                //This function is created for the \"remember\" tag,\n                //which stores more than one value in a single input field\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the point to it.\n                    // the value is stored as a list of float values e.g. \"[1,0.43]\"\n                    var coords = JSON.parse(theInput.value)[pointname];\n                    try {\n                        appletRef.setCoords(pointname,coords[0],coords[1]);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                }\n\n                var initialX = appletRef.getXcoord(pointname);\n                var initialY = appletRef.getYcoord(pointname);\n\n                /**\n                * Then the binding from graph to input\n                */\n                function updateValues(){\n                    // we have to initialize JSON with \"{}\"\n                    if(theInput.value.trim().length === 0){\n                        theInput.value=\"{}\";\n                      }\n\n                    var pointx = appletRef.getXcoord(pointname);\n                    var pointy = appletRef.getYcoord(pointname);\n\n                    if (initialX !== pointx || initialY !== pointy) {\n                        var tmpValue = [pointx, pointy];\n                        initialX = false; // ignore these after initial change.\n                        initialY = false;\n\n                        try{\n                            var lastinput = JSON.parse(theInput.value);\n                        } catch(err){\n                            //We do not care about this\n\n                        }\n                        if (!lastinput || !lastinput[pointname]\n                            || lastinput[pointname][0] != tmpValue[0]\n                            || lastinput[pointname][1] != tmpValue[1]) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            lastinput[pointname] = tmpValue;\n                            //saving as JSON string\n                            theInput.value = JSON.stringify(lastinput);\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n\n                        }\n\n                    }\n                }\n              setInterval(updateValues, 300);//time based listening is the only option because we can not listen to single objects\n\n                var lastValue = JSON.stringify([appletRef.getXcoord(pointname), appletRef.getYcoord(pointname)]);\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n\n                    try{\n                        var tmp = JSON.parse(theInput.value);\n                        if (JSON.stringify(tmp[pointname]) !== lastValue) {\n                            // Only when something changed.\n                                if (typeof tmp[pointname][0] == 'number' && typeof tmp[pointname][1] == 'number') {\n                                    appletRef.setCoords(pointname,tmp[pointname]);\n                                }\n                            lastValue =  JSON.stringify(tmp[pointname]);\n                        }\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    try{\n                        var tmp = JSON.parse(theInput.value);\n                        if (JSON.stringify(tmp[pointname]) !== lastValue) {\n                            // Only when something changed.\n                            if (typeof tmp[pointname][0] == 'number' && typeof tmp[pointname][1] == 'number') {\n                                appletRef.setCoords(pointname,tmp[pointname]);\n                            }\n                            lastValue = JSON.stringify(tmp[pointname]);\n                        }\n                    } catch(err){\n                        // We do not care about this.\n                    }\n                });\n            }\n        };\n    });\n"],"names":["define","GEOGEBRA","find_input_id","divid","name","tmp","document","getElementById","parentElement","classList","contains","querySelector","addEventListener","M","core_formchangechecker","set_form_changed","id","bind_point","inputRef","appletRef","pointname","theInput","value","coords","JSON","parse","setCoords","err","initialX","getXcoord","initialY","getYcoord","setInterval","pointx","pointy","stringify","window","location","pathname","indexOf","e","Event","dispatchEvent","lastValue","bind_value","valuename","setValue","initialValue","getValue","bind_value_to_remember_JSON","trim","length","tmpValue","lastinput","bind_point_to_remember_JSON"],"mappings":"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"}